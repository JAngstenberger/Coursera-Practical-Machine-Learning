source('~/.active-rstudio-document', echo=TRUE)
expDistribMean
View(expDistribMean)
View(expDistrib)
colnames(expDistribMean) <- "means"
smplMean <- mean(expDistribMean$means)
smplMean
source('~/.active-rstudio-document', echo=TRUE)
qplot(means, data=expDistribMeans, geom="histogram")
qplot(means, data=expDistribMeans, geom="histogram", binwidth=1)
qplot(means, data=expDistribMeans, geom="histogram", binwidth=10)
qplot(means, data=expDistribMeans, geom="histogram", binwidth=0.1)
qplot(means, data=expDistribMeans, geom="histogram", binwidth=0.01)
qplot(means, data=expDistribMeans, geom="histogram", binwidth=0.05)
qplot(means, data=expDistribMeans, geom="histogram", binwidth=0.1)
p <- qplot(means, data=expDistribMeans, geom="histogram", binwidth=0.1)
p + geom_line(aes(colour = "blue")) + geom_hline(yintercept=smplMean)
p <- qplot(means, data=expDistribMeans, geom="histogram", binwidth=0.1)
p + geom_hline(yintercept=smplMean)
p + geom_vline(yintercept=smplMean)
p <- qplot(means, data=expDistribMeans, geom="histogram", binwidth=0.1)
p + geom_vline(yintercept=smplMean)
smplMean <- mean(expDistribMeans$means)
p + geom_vline(yintercept=smplMean)
smplMean
p + geom_vline(vintercept=smplMean)
p + geom_vline(xintercept=smplMean)
p + geom_vline(xintercept=smplMean, colour="blue")
p + geom_vline(xintercept=smplMean, colour="blue", size=2)
p <- qplot(means, data=expDistribMeans, geom="histogram", binwidth=0.1)
p + geom_vline(xintercept=smplMean, colour="blue", size=2)
p + geom_vline(xintercept=mu, colour="red", size=2)
p <- qplot(means, data=expDistribMeans, geom="histogram", binwidth=0.1)
p + geom_vline(xintercept=smplMean, colour="blue", size=1)
p + geom_vline(xintercept=mu, colour="red", size=1)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
pSmplMean <- qplot(means, data=expDistribMeans, geom="histogram", binwidth=0.1) + geom_vline(xintercept=mu, colour="red", size=1) + ggtitle("Averages of exp. Distribution with sample mean (blue)")
qplot(means, data=expDistribMeans, geom="histogram", binwidth=0.1) + geom_vline(xintercept=mu, colour="red", size=1) + ggtitle("Averages of exp. Distribution with sample mean (blue)")
install.packages("gridExtra")
normDistrib <- rnorm(n, mean = mu, sd = sigma)
normDistrib
pNormDistrib <- qplot(normDistrib, geom="histogram", binwidth=0.1) + geom_vline(xintercept=mu, colour="red", size=1) + ggtitle("Distrib. with sample mean (red)")
qplot(normDistrib, geom="histogram", binwidth=0.1) + geom_vline(xintercept=mu, colour="red", size=1) + ggtitle("Distrib. with sample mean (red)")
normDistrib <- dnorm(x, mean = mu, sd = sigma, log = FALSE)
x=seq(3,7,length=200)
normDistrib <- rnorm(x, mean = mu, sd = sigma)
qplot(normDistrib, geom="histogram", binwidth=0.1) + geom_vline(xintercept=mu, colour="red", size=1) + ggtitle("Distrib. with sample mean (red)")
x=seq(3,7,length=1000)
normDistrib <- rnorm(x, mean = mu, sd = sigma)
pNormDistrib <- qplot(normDistrib, geom="histogram", binwidth=0.1) + geom_vline(xintercept=mu, colour="red", size=1) + ggtitle("Distrib. with sample mean (red)")
x=seq(3,7,length=1000)
normDistrib <- rnorm(x, mean = mu, sd = sigma)
pNormDistrib <- qplot(normDistrib, geom="histogram", binwidth=0.1) + geom_vline(xintercept=mu, colour="red", size=1) + ggtitle("Distrib. with sample mean (red)")
normDistib
normDistrib
qplot(normDistrib, geom="density", binwidth=0.1) + geom_vline(xintercept=mu, colour="red", size=1) + ggtitle("Distrib. with sample mean (red)")
x=seq(2,8,length=800)
normDistrib <- rnorm(x, mean = mu, sd = sigma)
normDistrib
qplot(normDistrib, geom="density", binwidth=0.1) + qplot(means, data=expDistribMeans, geom="density", binwidth=0.1) + geom_vline(xintercept=mu, colour="red", size=1) + ggtitle("Normal distribution")
pNorm <- qplot() + geom_density(normDistrib, binwidth=0.1) + ggtitle("Normal distribution")
pNorm <- geom_density(normDistrib, binwidth=0.1) + ggtitle("Normal distribution")
pNorm <- ggplot() + geom_density(aes(x=x), normDistrib, binwidth=0.1)
pNorm <- ggplot() + geom_density(aes(x=normDistrib), normDistrib, binwidth=0.1) + ggtitle("Normal distribution")
pExpMean <- geom_density(means, data=expDistribMeans, binwidth=0.1) + ggtitle("Distrib. with sample mean (red)")
type(normDistrib)
class(normDistrib)
normDistrib
?data.frame
normDistrib <- data.frame(rnorm(x, mean = mu, sd = sigma))
normDistrib
pNorm <- ggplot() + geom_density(aes(x=value), normDistrib, binwidth=0.1) + ggtitle("Normal distribution")
pNorm
x=seq(0,8,length=100000)
NormDistr <- data.frame(rnorm(x, mean = mu, sd = sigma))
colnames(expDistribMeans) <- "means"
ggplot() + geom_density(aes(x=means), NormDistr, binwidth=0.1)
ggplot() + geom_density(NormDistr, binwidth=0.1)
ggplot() + geom_density(aes(y=means), NormDistr, binwidth=0.1)
geom_density(NormDistr)
geom_density(aes(x=x), colour="red", data=NormDistr$means)
ggplot() + geom_density(aes(x=x), colour="red", data=NormDistr$means)
ggplot() + geom_density(aes(x=x), colour="red", data=NormDistr$means) + ggtitle("Normal distribution")
ggplot() + geom_density(aes(x=value), colour="red", data=NormDistr$means) + ggtitle("Normal distribution")
x=seq(0,8,length=100000)
NormDistr <- data.frame(rnorm(x, mean = mu, sd = sigma))
colnames(NormDistr) <- "value"
ggplot() + geom_density(aes(x=value), colour="red", data=NormDistr) + ggtitle("Normal distribution")
?aes
ggplot() + geom_density(aes(x=value), colour="red", data=NormDistr) + geom_density(aes(x=means), colour="blue", data=expDistribMeans) + ggtitle("Distributions")
ggplot(data=ToothGrowth, aes(x=as.factor(dose), y=len, fill=supp)) +
geom_boxplot(stat="identity",) +
facet_grid(. ~ supp) +
xlab("Dosage (in mg)") +
ylab("Tooth Length") +
guides(fill=guide_legend(title="Supplement Type"))
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
weighted.mean(x,w)
sum(x*w)/7
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y~x-1)
summary(fit)
data(mtcars)
lm(mtcars$mpg, mtcars$mpg)
lm(mpg ~ wt, mtcars)
summary(lm(mpg ~ wt, mtcars))
corOfYandX <- 0.5
sdYoverX <- 2
beta1 <- corOfYandX*sdYoverX
beta1
1.5*0.4
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x)
sd(x)
mean <- mean(x)
sd <- sd(x)
(x[1] - mean)/sd
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
summary(lm(y ~ x))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p=0.5,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
library(AppliedPredicitveModeling)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain =createDataPartition(mixtures$CompressiveStrength, p=3/4[[1]])
training=mixtures[inTrain,]
training=mixtures[ inTrain,]
inTrain =createDataPartition(mixtures$CompressiveStrength, p=3/4)[[1]]
training=mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(testing)
library(plyr)
splitOn <- cut2(training$Age, g=4)
splitOn <- mapvalues(splitOn,
from=levels(factor(splitOn)),
to=c("red", "blue", "yellow", "green"))
plot(training$CompressiveStrength, col=splitOn)
xnames <- colnames(concrete)[1:8]
featurePlot(x=training[, xnames], y=training$CompressiveStrength, plot="pairs")
# No relation between the outcome and other variables
index <- seq_along(1:nrow(training))
ggplot(data=training, aes(x=index, y=CompressiveStrength)) + geom_point() +
theme_bw()
# Step-like pattern -> 4 categories
library(Hmisc)
cutCompressiveStrength <- cut2(training$CompressiveStrength, g=4)
summary(cutCompressiveStrength)
ggplot(data=training, aes(y=index, x=cutCompressiveStrength)) +
geom_boxplot() + geom_jitter(col="blue") + theme_bw()
install.packages("Hmisc")
xnames <- colnames(concrete)[1:8]
featurePlot(x=training[, xnames], y=training$CompressiveStrength, plot="pairs")
# No relation between the outcome and other variables
index <- seq_along(1:nrow(training))
ggplot(data=training, aes(x=index, y=CompressiveStrength)) + geom_point() +
theme_bw()
# Step-like pattern -> 4 categories
library(Hmisc)
cutCompressiveStrength <- cut2(training$CompressiveStrength, g=4)
summary(cutCompressiveStrength)
ggplot(data=training, aes(y=index, x=cutCompressiveStrength)) +
geom_boxplot() + geom_jitter(col="blue") + theme_bw()
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p=3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(Superplasticizer, data=training) # OR
ggplot(data=training, aes(x=Superplasticizer)) + geom_histogram() + theme_bw()
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ss, method='pca', thresh=0.9,
outcome=training$diagnosis)
preProc$rotation
ss <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ss, method='pca', thresh=0.8,
outcome=training$diagnosis)
preProc$rotation
?markdown
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
weighted.mean(x, w)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
weighted.mean(x, y)
f <- lm(y ~ x)
summary(f)
data(mtcars)
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y ~ x)
predict(fit,data.frame(x=mean(x)), interval="confidence")
data(mtcars)
predict(fit, data.frame(x=mean(3)), interval="prediction")
fit2 <- lm(y ~ I(x / 2))
tbl2 <- summary(fit2)$coefficients
mean <- tbl2[2,1]
se <- tbl2[2,2]
df <- fit2$df
#Two sides T-Tests
mean + c(-1,1) * qt(0.975, df=df) * se
fitRes <- fit$residuals ^ 2
fitIntercept <- lm(mpg ~ 1, mtcars)
fitInterceptRes <- fitIntercept$residuals ^ 2
sum(fitRes) /sum(fitInterceptRes)
data(mtcars)
attach(mtcars)
fit <- lm(mpg ~ as.factor(cyl) + wt, data=mtcars)
summary(fit)
fit2 <- lm(mpg ~ as.factor(cyl), data=mtcars)
summary(fit2)$coef[3] # -11.56364
summary(fit)$coef[3]
library(caret)
library(kernlab)
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type,p=0,75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
training
dim(training)
dim(testing)
inTrain <- createDataPartition(y=spam$type,p=0.75, list=FALSE)
> training <- spam[inTrain,]
> testing <- spam[-inTrain,]
> dim(training)
inTrain <- createDataPartition(y=spam$type,p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
set.seed(32323)
folds <- createFolds(y=spam$tape, k=10, list=TRUE, returnTrain=TRUE)
folds <- createFolds(y=spam$type, k=10, list=TRUE, returnTrain=TRUE)
sapply(folds,length)
folds[[1]]
folds[[10]]
folds[[10]][1:10]
folds[[1]][1:10]
set.seed(32323)
folds <- createFolds(y=spam$type, k=10, list=TRUE, returnTrain=FALSE)
sapply(folds,length)
set.seed(32323)
library(AppliedPredicitiveModelling)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
histogram(~classes,data=myTraining,
type="density",
xlab="Classe of Exercise",
main="Histogram of Classe Frequency in Training Set")
library(lattuce, quietly=TRUE)
library(lattice, quietly=TRUE)
histogram(~classes,data=myTraining,
type="density",
xlab="Classe of Exercise",
main="Histogram of Classe Frequency in Training Set")
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/R/Coursera_Practial_Machine_Learning")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
histogram(~classe,data=myTraining,
col="blue",
type="density",
xlab="Classe of Exercise",
ylab="Frequency in Training Data"
main="Histogram of Classe Frequency in Training Set")
histogram(~classe,data=myTraining,
col="blue",
type="density",
xlab="Classe of Exercise",
ylab="Frequency in Training Data",
main="Histogram of Classe Frequency in Training Set")
histogram(~classe,data=pred_rf,
col="blue",
type="density",
xlab="Classe of Exercise",
ylab="Frequency in Training Data",
main="Histogram of Classe Frequency in Training Set")
histogram(data=pred_rf,
col="blue",
type="density",
xlab="Classe of Exercise",
ylab="Frequency in Training Data",
main="Histogram of Classe Frequency in Training Set")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
ggplot(myTraining, aes(x = dens, fill = lines)) + geom_density(alpha = 0.5)
library(ggplot2)
ggplot(myTraining, aes(x = dens, fill = lines)) + geom_density(alpha = 0.5)
ggplot(myTraining, aes(x = classe, fill = lines)) + geom_density(alpha = 0.5)
ggplot(myTraining, aes(x = classe, fill = lines)) + geom_density(alpha = 0.5)
ggplot(myTraining, aes(x = classe)) + geom_density(alpha = 0.5)
ggplot(myTraining, aes(x = classe))
ggplot(myTraining, aes(x = classe)) + geom_density(classe)
ggplot(myTraining, aes(x = classe)) + geom_density(myTraining$classe)
geom_density(data = myTraining$classe, stat = "density", position = "identity")
geom_histogram(data = myTraining$classe, stat = "bin",
position = "stack")
qplot(myTraining$classe, geom="histogram")
qplot(myTraining$classe, geom="density")
ggplot(myTraining, aes(x = classe, fill = lines)) + geom_density(alpha = 0.5)
ggplot(myTraining, aes(x = classe)) + geom_density(alpha = 0.5)
ggplot(myTraining, aes(x = classe)) + geom_density(colour="blue")
ggplot(myTraining, aes(x = classe)) + geom_density(fill="blue")
ggplot(myTraining, aes(x = classe)) + geom_histogram()
?ggplot
ggplot(myTraining, aes(x = classe)) + ggtitle("Plant growth") + geom_histogram(colour="blue")
ggplot(myTraining, aes(x = classe), main=”Distribution of Gas Milage”, xlab=”Miles Per Gallon”,
ylab=”Density”) + geom_histogram(colour="blue")
ggplot(myTraining, aes(x = classe)) + main=”Distribution of Gas Milage” + xlab=”Miles Per Gallon” +
ylab=”Density”) + geom_histogram()
ggplot(myTraining, aes(x = classe)) + ggtitle(”Distribution of Gas Milage”) + xlab(”Miles Per Gallon”) +
ylab(”Density”) + geom_histogram()
ggplot(myTraining, aes(x = classe)) + geom_histogram() + ggtitle(”Distribution of Gas Milage”) + xlab(”Miles Per Gallon”) + ylab(”Density”)
ggplot(myTraining, aes(x = classe)) + geom_histogram()
ggplot(myTraining, aes(x = classe)) + geom_histogram() + ggtitle(”Distribution of Gas Milage”)
ggplot(myTraining, aes(x = classe)) + ggtitle(”Distribution of Gas Milage”) + geom_histogram()
hist01 <- ggplot(myTraining, aes(x = classe))
hist01 + geom_histogram()
hist01 + ggtitle(”Distribution of Gas Milage”)
hist01 + xlab(”Miles Per Gallon”)
hist01 + ylab(”Density”)
hist01 + labs(title = "New plot title")
hist01 <- ggplot(myTraining, aes(x = classe))
hist01 + geom_histogram()
hist01 + labs(title = "New plot title")
hist01 <- ggplot(myTraining, aes(x = classe))
hist01 + ggtitle(”Distribution of Gas Milage”)
hist01 + xlab(”Miles Per Gallon”)
hist01 + ylab(”Density”)
hist01 + geom_histogram()
hist01 <- ggplot(myTraining, aes(x = classe))
hist01 + ggtitle("Distribution of Gas Milage")
hist01 + xlab("Miles Per Gallon")
hist01 + ylab("Density")
hist01 + geom_histogram()
hist01 <- ggplot(myTraining, aes(x = classe), main="huhu")
hist01 + ggtitle("Distribution of Gas Milage")
hist01 + xlab("Miles Per Gallon")
hist01 + ylab("Density")
hist01 + geom_histogram()
hist01 <- ggplot(myTraining, aes(x = classe))
hist01 + geom_histogram(main="huhu")
hist01 <- ggplot(myTraining, aes(x = classe)) + ggtitle("Distribution of Gas Milage")
hist01 + geom_histogram(main="huhu")
hist01 <- ggplot(myTraining, aes(x = classe)) + ggtitle("huhu title") + xlab("huhu x")
hist01 + geom_histogram(main="huhu")
hist01 <- ggplot(myTraining, aes(x = classe)) + ggtitle("huhu title") + xlab("huhu x") + ylab("huhu y") + geom_histogram(main="huhu")
hist01 <- ggplot(myTraining, aes(x = classe)) + ggtitle("huhu title") + xlab("huhu x") + ylab("huhu y") + geom_histogram()
ggplot(myTraining, aes(x = classe)) + ggtitle("huhu title") + xlab("huhu x") + ylab("huhu y") + geom_histogram()
ggplot(myTraining, aes(x = classe)) + ggtitle("Histogram of Classe Frequency in Training Data") + xlab("Exercise Classe") + ylab("Frequency in Training Data") + geom_histogram()
ggplot(classepredict, aes(x = classepredict)) + ggtitle("Histogram of Classe Frequency in Training Data") + xlab("Exercise Classe") + ylab("Frequency in Training Data") + geom_histogram()
ggplot(classepredict, aes(x = classepredict))
classepredict
class(classepredict)
myTraining$classe
class(myTraining$classe)
ggplot(aes(x = classepredict))
ggplot(classepredict)
classepredict
ggplot(aes(classepredict2=as.numeric(factor(classepredict))
)
)
ggplot(aes(classepredict2=as.numeric(factor(classepredict))))
source('~/.active-rstudio-document', echo=TRUE)
hist_comp <- c(classepredict, pred_rf, myTesting$classe)
hist_com
hist_comp
hist_comp <- as.data.frame(classepredict, pred_rf, myTesting$classe)
classepredict
pred_rf
myTesting$classe
dim(classepredict)
dim(pred_rf)
dim(myTesting$classe)
expand.grid(classepredict, pred_rf, myTesting$classe)
histogram(classepredict,
type="density",
xlab="speed (mph)",
main="Fastest Speed Ever Driven")
histogram(classepredict,
type="histogram",
xlab="speed (mph)",
main="Fastest Speed Ever Driven")
histogram(classepredict,
type="density",
xlab="speed (mph)",
main="Fastest Speed Ever Driven")
histogram(~x, data=classepredict,
type="density",
xlab="speed (mph)",
main="Fastest Speed Ever Driven")
classepredict
class(classepredict)
barplot(classepredict)
histogram(classepredict)
ggplot(data.frame(classepredict),aes(x=classepredict))
summary(classepredict)
summary(pred_rf)
summary(myTesting$classe)
dat2 <- data.frame(fac = factor(sample(LETTERS, 100, replace = TRUE)))
hist(table(dat2), xlab = "Frequency of Level Occurrence", main = "")
dat2
class(dat2)
dat2 <- data.frame(classepedict)
dat2 <- data.frame(classepredict)
dat2
dat2 <- data.frame(classepredict, myTesting$classe)
dat2
dat2 <- data.frame(classepredict, myTesting$classe)
summary(dat2)
dat2 <- data.frame(classepredict, pred_rf, myTesting$classe)
summary(dat2)
summary_myTest <- data.frame(classepredict, pred_rf, myTesting$classe)
hist(table(dat2), xlab = "Frequency of Level Occurrence", main = "")
hist(dat2, xlab = "Frequency of Level Occurrence", main = "")
barplot(table(dat2), main = "barplot")
barplot(dat2$classepredict, main = "barplot")
summary_myTest <- data.frame(classepredict, pred_rf, myTesting$classe)
colnames(summary_myTest) <- c("Pred_CT", "Pred_RF", "Result")
summary(summary_myTest)
ggplot(summary_myTest, aes(x = Pred_CT)) + ggtitle("Histogram of Classe Frequency in Training Data") + xlab("Exercise Classe") + ylab("Frequency in Training Data") + geom_histogram()
ggplot(summary_myTest, aes(x = Pred_RF)) + ggtitle("Histogram of Classe Frequency in Training Data") + xlab("Exercise Classe") + ylab("Frequency in Training Data") + geom_histogram()
ggplot(summary_myTest, aes(x = Result)) + ggtitle("Histogram of Classe Frequency in Training Data") + xlab("Exercise Classe") + ylab("Frequency in Training Data") + geom_histogram()
ggplot(summary_myTest, aes(x = Result)) + ggtitle("Histogram of Classe Frequency in Training Data") + xlab("Exercise Classe") + ylab("Frequency in Training Data") + geom_histogram()
pPred_CT <- ggplot(summary_myTest, aes(x = Pred_CT)) + ggtitle("Histogram of Classe Frequency in Classification Tree Prediction") + xlab("Exercise Classe") + ylab("Frequency in Classification Tree Prediction") + geom_histogram()
pPred_RF <- ggplot(summary_myTest, aes(x = Pred_RF)) + ggtitle("Histogram of Classe Frequency in Random Forest Prediction") + xlab("Exercise Classe") + ylab("Frequency in Random Forest Prediction") + geom_histogram()
pResult <- ggplot(summary_myTest, aes(x = Result)) + ggtitle("Histogram of Classe Frequency in Training Data Set myTesting") + xlab("Exercise Classe") + ylab("Frequency in Training Data Set myTesting") + geom_histogram()
multiplot(pPred_CT, pPred_RF, pResult, cols=1)
summary_myTest <- data.frame(classepredict, pred_rf, myTesting$classe)
source('~/.active-rstudio-document', echo=TRUE)
library(grid)
multiplot(pPred_CT, pPred_RF, pResult, cols=1)
multiplot
multiplot(pPred_CT, pPred_RF, pResult, cols=2)
grid.arrange(p1, p2, ncol = 2, main = "Main title")
library(extragrid)
library(gridExtra)
grid.arrange(p1, p2, ncol = 2, main = "Main title")
multiplot(pPred_CT, pPred_RF, pResult, cols=1)
library(grid)
multiplot(pPred_CT, pPred_RF, pResult, cols=1)
grid.arrange(pPred_CT, pPred_RF, pResult, ncol = 1, main = "Main title")
pPred_CT <- ggplot(summary_myTest, aes(x = Pred_CT)) + ggtitle("Histogram of Classe Frequency in Classification Tree Prediction") + xlab("Exercise Classe") + ylab("Frequency") + geom_histogram()
pPred_RF <- ggplot(summary_myTest, aes(x = Pred_RF)) + ggtitle("Histogram of Classe Frequency in Random Forest Prediction") + xlab("Exercise Classe") + ylab("Frequency") + geom_histogram()
pResult <- ggplot(summary_myTest, aes(x = Result)) + ggtitle("Histogram of Classe Frequency in Training Data Set myTesting") + xlab("Exercise Classe") + ylab("Frequency") + geom_histogram()
grid.arrange(pPred_CT, pPred_RF, pResult, ncol = 1, main = "Prediction Model Overview")
pPred_CT <- ggplot(summary_myTest, aes(x = Pred_CT)) + ggtitle("Histogram of Classe Frequency in Classification Tree Prediction") + xlab("Exercise Classe") + ylab("Frequency") + geom_histogram()
pPred_RF <- ggplot(summary_myTest, aes(x = Pred_RF)) + ggtitle("Histogram of Classe Frequency in Random Forest Prediction") + xlab("Exercise Classe") + ylab("Frequency") + geom_histogram()
pResult <- ggplot(summary_myTest, aes(x = Result)) + ggtitle("Histogram of Classe Frequency in Training Data Set myTesting") + xlab("Exercise Classe") + ylab("Frequency") + geom_histogram(fillr="red")
grid.arrange(pPred_CT, pPred_RF, pResult, ncol = 1, main = "Prediction Model Overview")
pPred_CT <- ggplot(summary_myTest, aes(x = Pred_CT)) + ggtitle("Histogram of Classe Frequency in Classification Tree Prediction") + xlab("Exercise Classe") + ylab("Frequency") + geom_histogram()
pPred_RF <- ggplot(summary_myTest, aes(x = Pred_RF)) + ggtitle("Histogram of Classe Frequency in Random Forest Prediction") + xlab("Exercise Classe") + ylab("Frequency") + geom_histogram()
pResult <- ggplot(summary_myTest, aes(x = Result), colour="red") + ggtitle("Histogram of Classe Frequency in Training Data Set myTesting") + xlab("Exercise Classe") + ylab("Frequency") + geom_histogram()
grid.arrange(pPred_CT, pPred_RF, pResult, ncol = 1, main = "Prediction Model Overview")
pPred_CT <- ggplot(summary_myTest, aes(x = Pred_CT)) + ggtitle("Histogram of Classe Frequency in Classification Tree Prediction") + xlab("Exercise Classe") + ylab("Frequency") + geom_histogram()
pPred_RF <- ggplot(summary_myTest, aes(x = Pred_RF)) + ggtitle("Histogram of Classe Frequency in Random Forest Prediction") + xlab("Exercise Classe") + ylab("Frequency") + geom_histogram()
pResult <- ggplot(summary_myTest, aes(x = Result), fill="orange") + ggtitle("Histogram of Classe Frequency in Training Data Set myTesting") + xlab("Exercise Classe") + ylab("Frequency") + geom_histogram()
grid.arrange(pPred_CT, pPred_RF, pResult, ncol = 1, main = "Prediction Model Overview")
pPred_CT <- ggplot(summary_myTest, aes(x = Pred_CT)) + ggtitle("Histogram of Classe Frequency in Classification Tree Prediction") + xlab("Exercise Classe") + ylab("Frequency") + geom_histogram()
pPred_RF <- ggplot(summary_myTest, aes(x = Pred_RF)) + ggtitle("Histogram of Classe Frequency in Random Forest Prediction") + xlab("Exercise Classe") + ylab("Frequency") + geom_histogram()
pResult <- ggplot(summary_myTest, aes(x = Result)) + ggtitle("Histogram of Classe Frequency in Training Data Set myTesting") + xlab("Exercise Classe") + ylab("Frequency") + geom_histogram(fill="#FF9999", colour="black")
grid.arrange(pPred_CT, pPred_RF, pResult, ncol = 1, main = "Prediction Model Overview")
pPred_CT <- ggplot(summary_myTest, aes(x = Pred_CT)) + ggtitle("Histogram of Classe Frequency in Classification Tree Prediction") + xlab("Exercise Classe") + ylab("Frequency") + geom_histogram()
pPred_RF <- ggplot(summary_myTest, aes(x = Pred_RF)) + ggtitle("Histogram of Classe Frequency in Random Forest Prediction") + xlab("Exercise Classe") + ylab("Frequency") + geom_histogram()
pResult <- ggplot(summary_myTest, aes(x = Result)) + ggtitle("Histogram of Classe Frequency in Training Data Set myTesting") + xlab("Exercise Classe") + ylab("Frequency") + geom_histogram(fill="orange", colour="black")
grid.arrange(pPred_CT, pPred_RF, pResult, ncol = 1, main = "Prediction Model Overview")
pPred_CT <- ggplot(summary_myTest, aes(x = Pred_CT)) + ggtitle("Histogram of Classe Frequency in Classification Tree Prediction") + xlab("Exercise Classe") + ylab("Frequency") + geom_histogram()
pPred_RF <- ggplot(summary_myTest, aes(x = Pred_RF)) + ggtitle("Histogram of Classe Frequency in Random Forest Prediction") + xlab("Exercise Classe") + ylab("Frequency") + geom_histogram()
pResult <- ggplot(summary_myTest, aes(x = Result)) + ggtitle("Histogram of Classe Frequency in Training Data Set myTesting") + xlab("Exercise Classe") + ylab("Frequency") + geom_histogram(fill="vermilon", colour="black")
grid.arrange(pPred_CT, pPred_RF, pResult, ncol = 1, main = "Prediction Model Overview")
pPred_CT <- ggplot(summary_myTest, aes(x = Pred_CT)) + ggtitle("Histogram of Classe Frequency in Classification Tree Prediction") + xlab("Exercise Classe") + ylab("Frequency") + geom_histogram()
pPred_RF <- ggplot(summary_myTest, aes(x = Pred_RF)) + ggtitle("Histogram of Classe Frequency in Random Forest Prediction") + xlab("Exercise Classe") + ylab("Frequency") + geom_histogram()
pResult <- ggplot(summary_myTest, aes(x = Result)) + ggtitle("Histogram of Classe Frequency in Training Data Set myTesting") + xlab("Exercise Classe") + ylab("Frequency") + geom_histogram(fill="vermilion", colour="black")
grid.arrange(pPred_CT, pPred_RF, pResult, ncol = 1, main = "Prediction Model Overview")
pPred_CT <- ggplot(summary_myTest, aes(x = Pred_CT)) + ggtitle("Histogram of Classe Frequency in Classification Tree Prediction") + xlab("Exercise Classe") + ylab("Frequency") + geom_histogram()
pPred_RF <- ggplot(summary_myTest, aes(x = Pred_RF)) + ggtitle("Histogram of Classe Frequency in Random Forest Prediction") + xlab("Exercise Classe") + ylab("Frequency") + geom_histogram()
pResult <- ggplot(summary_myTest, aes(x = Result)) + ggtitle("Histogram of Classe Frequency in Training Data Set myTesting") + xlab("Exercise Classe") + ylab("Frequency") + geom_histogram(fill="#FF9999", colour="black")
grid.arrange(pPred_CT, pPred_RF, pResult, ncol = 1, main = "Prediction Model Overview")
source('~/.active-rstudio-document', echo=TRUE)
